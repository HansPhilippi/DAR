Opgave 1: (MapReduce) heel banale antwoorden geven heel banale scores.
Emit je elk symbool zonder preprocessing in de Map, dan is je maximale score 5 uit 10,
want "performance is zeer belangrijk". Je gaat een powerful piece of parallel hardware 
toch niet zo programmeren dat ie bergen nutteloze communicatie verzet.

Je kunt in de Map al veel werk doen.
Init_Map: Leg een dictionary van counters aan voor de symbolen.
Map: Een voorkomen van een symbool voor de # levert +1, anders -1.
Finalize_Map: Emit <symbol, counter> voor elk element in de Dictionary (mits counter <> 0).

De Reduce sommeert alle counters per symbool en emit elk symbool met frequentie = counter,
mits de counter positief is.

Ik doe niet moeilijk over syntax, maar ik zag wel heel rare dingen die punten kosten.
Je moet wel aangeven in welke vorm (<key, value>) de Map waardes emit.
Daar zit namelijk de grouping tussen en dat bepaalt de structuur van de input van Reduce.
Sommigen stopten doodleuk hele datastructuren (met directe verwijzingen naar geheugenadressen)
of files in de emit. Ga dat maar eens groeperen.
Dat kan simpelweg niet en het toont aan dat je de communicatie tussen Map en Reduce niet begrijpt.

Opgave 2: (Top-k)
Vraag (i) was recht-toe-recht-aan en goed gemaakt.
Bijna iedereen zag in dat een hybride aanpak van TA en NRA mogelijk was.
Helaas gingen sommigen bij (ii) dan gemakshalve met NRA aan de slag.
(Je doet toch mee aan een toets om je intellectuele spierballen te laten zien!)
A-B kan door kolom B andersom te scannen.

Opgave 3: (PageRank)
G bestaat uit drie termen. De eerste term is alfa.H, en die is sparse.
Term 2 is alfa/n.eaT. Die is niet sparse, maar kijk eens goed wat de complexiteit is wanneer je deze matrix op de vector P loslaat.
Term 3 is (1-alfa)/n.eaT. Die is niet sparse, maar kijk eens goed wat de complexiteit is wanneer je deze matrix op de vector P loslaat.

Opgave 4: (sequence alignment)
KILL +++L EVIL, score 12 (de 12 is al cumulatief). 
Veel fouten in de matrix buiten de diagonaal gezien (zelfs < 0).

Smith-Waterman via MapReduce? 
Ondoenlijk, omdat dynprog-matrix bomvol zit met afhankelijkheden.
Maar: splits je je database in onafhankelijke string-subcollecties, 
dan loopt het als een zonnetje. Beide antwoorden zijn goed gerekend.

Wat heeft BLAST als uitbreidingen:
= Two hit diagonal principe: hogere precision, lagere recall
= Hit geldt ook voor niet-letterlijke 3-gram match via BLOSUM values en drempel;
  precision en recall hangen af van de drempel.

Wat kun je nog verzinnen?
= k van de k-gram groter, kleiner; N-hit diagonal; beetje rek in diagonal-eis;
  gaps in k-grams (wordt toegepast!), ...

De laatste twee onderdelen van de vraag werden veelal door elkaar gehaald. (Mild beoordeeld.)